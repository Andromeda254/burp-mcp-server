{
  "mcpServers": {
    "burp-mcp-server": {
      "command": "java",
      "args": [
        "-jar",
        "/home/jojo/dev/burp-mcp-server/build/libs/burp-mcp-server-1.0.0-all.jar",
        "--stdio"
      ],
      "env": {
        "JAVA_HOME": "/usr/lib/jvm/java-17-openjdk-amd64",
        "BURP_MCP_LOG_LEVEL": "INFO"
      }
    }
  },
  "prompts": [
    {
      "name": "web-security-audit",
      "description": "Perform a comprehensive web application security audit",
      "arguments": [
        {
          "name": "target_url",
          "description": "The target web application URL to audit",
          "required": true
        },
        {
          "name": "scan_type",
          "description": "Type of scan: passive, active, or full",
          "required": false
        },
        {
          "name": "focus_areas",
          "description": "Specific security areas to focus on (e.g., OWASP Top 10, API security, authentication)",
          "required": false
        }
      ],
      "template": "I need you to perform a comprehensive security audit of {{target_url}}.\n\nPlease follow this systematic approach:\n\n1. **Initial Reconnaissance**\n   - Get basic information about the target using burp_info\n   - Start with a {{scan_type || 'passive'}} scan to identify the attack surface\n\n2. **Vulnerability Assessment**\n   - Analyze the scan results for security issues\n   - Focus on {{focus_areas || 'OWASP Top 10 vulnerabilities'}}\n   - Use the site map to understand the application structure\n\n3. **Manual Testing**\n   - Send interesting requests to Repeater for manual analysis\n   - Use Intruder for targeted attacks on suspicious parameters\n   - Test authentication and authorization mechanisms\n\n4. **Reporting**\n   - Summarize all findings with severity levels\n   - Provide remediation recommendations\n   - Include evidence from BurpSuite (requests/responses)\n\nPlease start the audit and guide me through each step with detailed explanations."
    },
    {
      "name": "api-security-test",
      "description": "Specialized security testing for REST APIs",
      "arguments": [
        {
          "name": "api_base_url",
          "description": "Base URL of the API to test",
          "required": true
        },
        {
          "name": "auth_method",
          "description": "API authentication method (Bearer token, API key, etc.)",
          "required": false
        },
        {
          "name": "endpoints",
          "description": "Specific API endpoints to test (comma-separated)",
          "required": false
        }
      ],
      "template": "Let's perform specialized security testing for the API at {{api_base_url}}.\n\n**API Security Testing Plan:**\n\n1. **Discovery & Enumeration**\n   - Scan the API to discover all endpoints\n   - Map the API structure using the site map\n   - Identify {{auth_method || 'authentication mechanisms'}}\n\n2. **OWASP API Security Top 10 Testing**\n   - Test for broken authentication and authorization\n   - Check for excessive data exposure\n   - Verify rate limiting and resource management\n   - Test input validation and injection vulnerabilities\n\n3. **Specific Endpoint Testing**\n   {{#if endpoints}}Focus on these endpoints: {{endpoints}}{{else}}Test all discovered endpoints systematically{{/if}}\n   - Send malformed requests to test error handling\n   - Use Intruder for parameter fuzzing\n   - Test different HTTP methods (GET, POST, PUT, DELETE, PATCH)\n\n4. **Business Logic Testing**\n   - Test API workflow bypasses\n   - Check for privilege escalation opportunities\n   - Verify data validation across different endpoints\n\nStart by scanning the API and then guide me through systematic testing of each security aspect."
    },
    {
      "name": "quick-vulnerability-scan",
      "description": "Quick security scan for immediate vulnerability identification",
      "arguments": [
        {
          "name": "target",
          "description": "Target URL or domain to scan",
          "required": true
        }
      ],
      "template": "Perform a quick security scan of {{target}} and give me immediate results.\n\nPlease:\n1. Start a passive scan for safe, non-intrusive testing\n2. Show me the results as soon as they're available\n3. Highlight any HIGH or CRITICAL severity issues\n4. Provide a summary of the security posture\n\nI need results quickly, so focus on the most common and critical vulnerabilities first."
    },
    {
      "name": "manual-penetration-test",
      "description": "Guide manual penetration testing with BurpSuite tools",
      "arguments": [
        {
          "name": "target_url",
          "description": "Target application URL",
          "required": true
        },
        {
          "name": "test_scenarios",
          "description": "Specific test scenarios or attack vectors to focus on",
          "required": false
        }
      ],
      "template": "Help me conduct manual penetration testing of {{target_url}} using BurpSuite tools.\n\n**Manual Testing Approach:**\n\n1. **Proxy Setup & Traffic Analysis**\n   - Review proxy history for interesting requests\n   - Identify potential attack vectors from traffic patterns\n\n2. **Manual Request Manipulation**\n   - Send suspicious requests to Repeater for modification\n   - Test various payloads and injection techniques\n   - Analyze responses for security vulnerabilities\n\n3. **Automated Attack Vectors** {{#if test_scenarios}}\n   Focus on: {{test_scenarios}}{{/if}}\n   - Use Intruder for parameter brute-forcing\n   - Test common attack patterns (SQLi, XSS, CSRF, etc.)\n   - Enumerate hidden parameters and endpoints\n\n4. **Deep Analysis**\n   - Decode/encode suspicious data found in requests\n   - Compare similar requests to identify patterns\n   - Document all findings with evidence\n\nGuide me step-by-step through the manual testing process, explaining what to look for and how to exploit any findings."
    },
    {
      "name": "security-issue-analysis",
      "description": "Analyze and explain security issues found in BurpSuite",
      "arguments": [],
      "template": "Analyze all the security issues currently found in BurpSuite and provide a comprehensive report.\n\nPlease:\n1. Get all current security issues from the scanner\n2. Categorize them by severity (Critical, High, Medium, Low)\n3. Explain each vulnerability type and its potential impact\n4. Provide specific remediation steps for each issue\n5. Prioritize fixes based on risk assessment\n\nMake the analysis suitable for both technical and non-technical stakeholders."
    },
    {
      "name": "burp-workflow-automation",
      "description": "Set up automated security testing workflows",
      "arguments": [
        {
          "name": "target_list",
          "description": "Comma-separated list of targets to scan",
          "required": true
        },
        {
          "name": "scan_schedule",
          "description": "When to run scans (e.g., 'daily', 'weekly', 'on-demand')",
          "required": false
        }
      ],
      "template": "Help me set up an automated security testing workflow for these targets: {{target_list}}\n\n**Automation Setup:**\n\n1. **Batch Scanning**\n   - Configure scans for all targets\n   - Set appropriate scan types for each target\n   - Schedule: {{scan_schedule || 'on-demand'}}\n\n2. **Monitoring & Alerting**\n   - Set up monitoring for new high-severity issues\n   - Configure automated reporting\n   - Define escalation procedures\n\n3. **Integration Workflow**\n   - Show how to integrate results with other security tools\n   - Demonstrate API access for automated processing\n   - Set up continuous security monitoring\n\nWalk me through setting up this automated workflow and show me how to monitor and manage the results effectively."
    }
  ],
  "globalShortcuts": [
    {
      "name": "Quick Scan",
      "key": "Ctrl+Shift+S",
      "action": "Use the 'quick-vulnerability-scan' prompt"
    },
    {
      "name": "Security Analysis",
      "key": "Ctrl+Shift+A",
      "action": "Use the 'security-issue-analysis' prompt"
    }
  ]
}
